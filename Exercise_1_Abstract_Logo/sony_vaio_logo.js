// Rendering Sony VAIO Logo

// This Logo consists of 4 major components:
// 1. A wave representing the capital letters: 'VA'
// 2. A circle represent the horizontal line in the A
// 3. A line with a curve at the top representing the I
// 4. A circle representing the capital letter O
//
// 'VA' - The VA combination resembles a simple
// cosine wave starting with with an angle = PI radians
// and cycling thru ~1.7 periods with a given amplitude
// Additionally, a small circle is used to represent
// the horizontal line in the A
//
// 'I' - The I in VAIO takes the form of a straight line
// with a curved endcap at the top.  The endcap takes
// the form of a regular arc starting at angle PI radians
// and ending at ~PI + .2PI radians.
//
// 'O' - The letter O is represented by two concentric
// circles. Usually, the outer circle is the same color as 
// the other letters, while the inner smaller circle takes
// the color of the background.

// While the basic elements are relatively straightforward,
// it takes a bit of testing and adjustment to get the exact placements
// and shapes of the elements. For example, the endcap of the
// wave in the official logo is a straight vertical line that falls
// on the tangent of the lowest point in the curve. There is
// no element in p5.js (that I know of) that enables an endcap 
// of this sort that also preserves the uniformity and smoothness 
// of the wave. Consequently, in this version I've employed a bit 
// of 'kluge' to black out the end of the curve to match the 
// vertical shape.

// The same sort of issue arises with the capital I which has
// a curved end cap.  Here the lower part of the I is straightforward
// an, can be generated by a line or a rectangle. However,
// there is no direct way to get the curved endcap at the top.
//
// Here, I use, an arc:

//   arc(x,y,diameter,diameter,start_angle,end_angle)
//   where the angles are in radians

// While there is probably a way to mathematically determine
// the length of the diameters and angles (it alludes me at the moment).
// As a consequence, it takes a bit manual adjustment to 
// determine their exact values.
//
// The letter O is the easiest to generate, 
// requiring an outer circle and inner circle that represents
// the cutout the of the letter.
// 
// With all the letters the key is to utilize elements
// and measures that produce letters with the same
// 'thickness' (if that's the right term). In this instance,
// the 'thickness' is represented by the variable 'sWeight'.
// Again, the difficulty is that the various elements come close 
// but don't necessarily produce uniform thickness
// without a bit of testing and adjustment of the properties and
// and elements used to generate the letters.
//
// Finally the horizontal placement of the letters (x-values) was
// created by taking an existing official image of the logo, calculating
// the horizontal midpoint of the various letters, and using the 
// ratios of those midpoints to the length of the logo to determine
// the placement on the canvas.  Additionally, ratio of the height of the
// official logo to its width was also also maintained in this 
// generated version. Again, some adjustments were required.

// In addition to the resources noted in the exercise,
// I also relied on:

// 1. Dan Shiffman. 'The Sine Wave' example in the Processing Reference at:
// 'https://processing.org/examples/sinewave.html'
//
// 2. 'Amplitude and Period of Sine and Cosine' at
//http://www.montereyinstitute.org/courses/DevelopmentalMath/COURSE_TEXT2_RESOURCE/U19_L2_T3_text_final.html

// 3. Various online images of the official Sony VAIO logo.

// Things (among others) that could be improved:
// 1. shift from functional to object representation (relatively straightforward)
// 2. which could eliminate most of the globals
// 3. enable creation of version where the logo can be easily re-scaled,
// rotated, translated, etc.
// 4. determine more elegant ways to eliminate the endcap kluges
//
// Code:

let xSpacing; // Spacing between ellipses used to draw wave
let w; // width of overall VA wave
let amplitude; // height of wave in pixels
let period; // Number of pixels before the wave repeats
let dx; // Value for incrementing X angle, a function of period and xspacing
let yvalues = []; //Array of floats to store y values of cosine wave
let yVLength; // length of array containing y values of cosine wave
let sWeight; // represents the width of the various letters in logo
let bkColor; //background color
let letterColor; //color of letters -- in this version all are the same
let theta;

function setup() {
  createCanvas(900, 300);

  //bkColor = color(0, 0, 0);
  //letterColor = color(255, 0, 0);
  
  bkColor = color(255, 255, 255);
  letterColor = color(255, 0, 255);
  background(bkColor);

  // establish key parameters. The various
  // decimal values are based on the standard ratios
  // derived from official versions of the logo
  // e.g. the width of the wave in the official version
  // is ~55% of the total logo. In most instances it takes 
  // a bit of trial & error to produce the various letters.

  xSpacing = 2;
  amplitude = 0.25 * height;
  w = 0.55 * width;
  period = 0.3 * width;
  sWeight = 0.03 * width;
  dx = (1.70 * PI / period) * xSpacing;
  yVlength = w / xSpacing;
  theta = PI;

  calcVAWave(theta, yVlength, dx);
  renderVAWave(letterColor,xSpacing,sWeight);
  
  // circle under A
  let xCntr = 0.354 * width;
  let yCntr = 0.6 * height;
  diametr = 1.5 * sWeight;
  calc_and_render_circle(letterColor,xCntr,yCntr,diametr);
  
  // letter I
  let xStrt = 0.68 * width + 20;
  let yStrt = 0.33 * height - 5;
  let yEnd = 0.7 * height + sWeight / 2;
  
  calc_and_render_I(letterColor,xStrt,yStrt,yEnd,sWeight);
  
  // letter O -- outer circle
  xCntr = 0.87 * width;
  yCntr = 0.5 * height;
  
  //diametr = sWeight * 1.5;// 214 pixels is the width of the letter O in standard logo
  //outerDiametr = 0.22 * width
  outerDiametr = 0.6 * height;
  calc_and_render_circle(letterColor,xCntr,yCntr,outerDiametr);
  // inner circle
  innerDiametr = outerDiametr - 2 * sWeight
  //calc_and_render_circle(bkColor,xCntr,yCntr,diametr-(0.7*80));
  calc_and_render_circle(bkColor,xCntr,yCntr,innerDiametr);
}

function calcVAWave(theta, yVlength, dx) {
  // creates a set of y values representing
  // points along a cosine wave generated
  // with a given 'amplitude' and periodicity.
  // These y-values are stored in an array that
  // used to render the wave. The associated
  // x values come from an angle that 
  // starts at PI radians and ends 
  // at ~1.2 PI radians
  
  ang = theta; 
  for (let i = 0; i < yVlength; i++) {
    yvalues[i] = cos(ang) * amplitude
    ang += dx;
  }
}

function renderVAWave(letterColor,xSpacing,sWeight) {
  // combined capital letters 'VA' created by
  // placing ellipses along a curve generated
  // using cosine wave with a given period and
  // amplitude. The ellipses are close enough
  // that the produce a smooth line with 
  // thickness of sWeight
  
  noStroke();
  fill(letterColor);
  let x, xPnt, yPnt;

  for (x = 0; x < yvalues.length; x++) {
    xPnt = x * xSpacing;
    yPnt = height / 2 + yvalues[x];
    ellipse(xPnt, yPnt, sWeight, sWeight);
  }

  // Bit of 'kluge' to cover up the rounded
  // endcap at the end of the cosine wave
  // using a series of vertical straightlines

  stroke(bkColor);
  strokeWeight(1);
  xPnt = xPnt - 10;
  for (let i = 0; i < 40; i++) {
    line(xPnt + i, yPnt - 25, xPnt + i, yPnt + 25);
  }
} // end of renderAVWave

function calc_and_render_circle(fillColor,xCntr,yCntr,diametr){
  noStroke();
  fill(fillColor);
  circle(xCntr,yCntr,diametr);
}

function calc_and_render_I(fillColor, xStrt, yStrt, yEnd, sWeight) {
  // letter I - built from a line of sWeight thickness
  // and a series of arcs that are 2 pixels thick which
  // are combined to produce an curved endcap whose combined
  // thickness is close to sWeight
  
  stroke(fillColor);
  strokeWeight(sWeight);
  strokeCap(SQUARE); //shape of line and arc endpoints
  
  // Create rectangle part of letter I
  for (i = yStrt+5; i < yEnd + 13; i++) {
    line(xStrt - sWeight/2, i, xStrt + sWeight/2, i);
  }

  // Create end cap on letter I
  strokeWeight(2);
  //strokeCap(SQUARE); //controls the shape of arc endpoint
  noFill();
  
  let nArcs = 2*sWeight-2; //50 & 52controls the number of arcs created
  let intArcDiametr = 0.131125 * width; //.13... is the ratio arc diameter to width 

  //for (let i = 0; i < nArcs; i++) {
  for (let i = 0; i < nArcs; i++) {
    arc(xStrt + 0.052 * width, yStrt-5, intArcDiametr - i, intArcDiametr - i, PI, PI + float((1 / 4.5) * PI));
  }
}

function keyTyped(){
  if (key == 's' || key == 'S') save('sony_vaio_logo.png')
}